FROM nvcr.io/nvidia/tensorflow:24.02-tf2-py3 as builder


# Packages installation (eg git-lfs)
RUN apt-get update && export DEBIAN_FRONTEND=noninteractive \
    && apt-get -y install --no-install-recommends curl git-lfs ffmpeg libsm6 libxext6 graphviz libsndfile1-dev libgraphviz-dev xdg-utils swig gringo gobject-introspection libcairo2-dev libgirepository1.0-dev pkg-config python3-dev python3-gi

COPY docker/docker-font.conf /etc/fonts/local.conf
#ENV FREETYPE_PROPERTIES="truetype:interpreter-version=35"
RUN echo "ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true" | debconf-set-selections
RUN apt-get update \
	&& apt-get install -y --no-install-recommends fontconfig ttf-mscorefonts-installer


# ACT for executing locally Github workflows
RUN curl -s https://raw.githubusercontent.com/nektos/act/master/install.sh |  bash

# NVM for managing npm versions
RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh |  bash

# Git LFS repo configuration
RUN curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh |  bash

# inscape installation for managing svg files
RUN apt-get update && export DEBIAN_FRONTEND=noninteractive \
    && apt-get -y install --no-install-recommends inkscape


SHELL ["/bin/bash", "-c"]
ENV PATH="/home/vscode/.local/bin:$PATH"
ENV GI_TYPELIB_PATH="/usr/lib/x86_64-linux-gnu/girepository-1.0"

# Install python packages other than development dependencies
RUN pip install --upgrade pip
RUN pip install pre-commit
RUN pip install pip-tools
RUN pip install invoke
WORKDIR /tmp
COPY requirements/requirements.in .
COPY requirements/tasks.py .
# compile-dependencies to compile all the files without updating the existing 
# dependencies. Do not use the pip-sync option in NVIDIA docker containers
RUN invoke compile-dependencies 
#TODO: Address the --ignore-installed flag in the requirements.txt file since with this flag 
# the dependencies are not updated. It seems that the NVIDIA container requirements.txt must be
# the input of requirements.in file.
RUN pip install --ignore-installed -r requirements.txt

FROM builder as runtime

# specify vscode as the user name in the docker
# This user name should match that of the VS Code .devcontainer to allow seamless development inside the docker container via vscode 
ARG USERNAME=vscode
ARG USER_UID=1001
ARG USER_GID=$USER_UID

# Create a non-root user
RUN groupadd --gid $USER_GID $USERNAME \
  && useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \
  # [Optional] Add sudo support for the non-root user - this is ok for development dockers only
  && apt-get update \
  && apt-get install -y sudo \
  && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME\
  && chmod 0440 /etc/sudoers.d/$USERNAME \
  # Cleanup
  && rm -rf /var/lib/apt/lists/* \
  # Set up git completion.
  && echo "source /usr/share/bash-completion/completions/git" >> /home/$USERNAME/.bashrc 

  
WORKDIR /workspaces/artificial_intelligence

COPY . . 

# Install the development python dependencies
WORKDIR /workspaces/artificial_intelligence/requirements
RUN invoke compile-dev-dependencies
RUN pip install --ignore-installed -r requirements-dev.txt
# copy the requirements.txt and constraints.txt over from the builder stage 
# so we can commit them to the repo. 
RUN cp /tmp/requirements.txt .
RUN cp /tmp/constraints.txt .

WORKDIR /workspaces/artificial_intelligence

# Install local packages or packages that cannot be installed via pip-tools due to hashing issues
RUN pip install -e git+https://github.com/pantelis-classes/PRML.git#egg=prml

USER vscode
